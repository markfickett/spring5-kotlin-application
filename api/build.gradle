group 'app.api'

buildscript {
    ext.kotlin_version = '1.2.10'
    ext.springboot_version = "2.0.5.RELEASE"
    ext.grpc_version = "1.7.1"
    ext.kotlin_coroutine_version = "0.16"

    repositories {
        mavenCentral()

        maven { url "https://repo.spring.io/milestone" }
        maven { url 'http://repo.spring.io/plugins-release' }

        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springboot_version"
        classpath 'io.spring.gradle:propdeps-plugin:0.0.9.RELEASE'
        classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.1"
    }
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-kapt'
apply plugin: 'application'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'
apply plugin: 'application'
apply plugin: 'com.google.protobuf'

mainClassName = "app.Application"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()

    maven { url "https://repo.spring.io/milestone" }
    maven { url "http://maven.springframework.org/milestone" }

    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

compileKotlin {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions{
        jvmTarget = "1.8"
    }
}

processResources.destinationDir = compileJava.destinationDir
compileJava.dependsOn processResources

kapt {
    generateStubs = false
}

configure(allprojects) {
    apply plugin: 'propdeps-idea'
}

configurations {
    optional
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // spring-boot
    compile ("org.springframework.boot:spring-boot-starter-webflux") {
        exclude module: "hibernate-validator"
    }
    compile ("org.springframework.boot:spring-boot-starter-reactor-netty")
    optional "org.springframework.boot:spring-boot-configuration-processor"
    compile "io.projectreactor:reactor-kotlin-extensions:1.0.0.M1"
    compile "org.lognet:grpc-spring-boot-starter:2.0.3"

    // grpc
    compile "io.grpc:grpc-netty:${grpc_version}"
    compile "io.grpc:grpc-protobuf:${grpc_version}"
    compile "io.grpc:grpc-stub:${grpc_version}"
    compile "io.grpc:grpc-okhttp:${grpc_version}"
    compile "com.google.api.grpc:googleapis-common-protos:0.0.3"

    // functions
    compile "com.github.kittinunf.result:result:1.1.0"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.2"

    // log
    compile "io.github.microutils:kotlin-logging:1.4.4"

    // kotlin-coroutine
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutine_version"

    // jedis
    compile 'redis.clients:jedis:2.9.0'

    // test
    testCompile "org.springframework.boot:spring-boot-starter-test:$springboot_version"
    testCompile "io.kotlintest:kotlintest:2.0.1"
    testCompile 'org.powermock:powermock-module-junit4:2.0.0-beta.5'
    testCompile 'org.powermock:powermock-core:2.0.0-beta.5'
    testCompile 'org.powermock:powermock-api-mockito2:2.0.0-beta.5'
}

sourceSets {
    generated {
        "${buildDir}/generated/source/kapt/main/"
    }

    main {
        proto {
            srcDir 'src/main/proto'
        }
        kotlin {
            srcDir 'src/main/kotlin'
        }
        java {
            srcDir 'src/main/java'
            srcDir 'src/main/grpc'
        }
    }
}

idea {
    module {
        sourceDirs += file("${buildDir}/generated/source/kapt/main/")
        sourceDirs += file("src/main/grpc/")
        generatedSourceDirs += "${buildDir}/generated/source/kapt/main/"

        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.2.0'
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpc_version}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
    generatedFilesBaseDir = "$projectDir/src/"
}

task cleanProtoGen{
    doFirst{
        delete("$projectDir/src/main/grpc")
        delete("$projectDir/src/main/java/app/grpc")
    }
}
clean.dependsOn cleanProtoGen

task protoDep {
    def identity_file = "id_rsa"
    if (findProperty("identityFile") != null) {
        identity_file = findProperty("identityFile")
    }
    def forceUpdate = ""
    if (findProperty("forceUpdate") != null || findProperty("forceUpdate") == true) {
        forceUpdate = "-f"
    }
    doLast() {
        exec {
            commandLine = ["protodep", forceUpdate, "--identity-file=${identity_file}", "up"]
        }
    }
}

//tasks.whenTaskAdded { task ->
//    if (task.name == "generateProto" && !project.hasProperty("IGNORE_PROTO_DEP")) {
//        task.dependsOn protoDep
//    }
//}

kotlin {
    experimental {
        coroutines "enable"
    }
}
